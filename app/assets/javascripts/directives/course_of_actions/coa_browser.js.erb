<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

app.directive('coaBrowser', function(){
	return {
		restrict: 'E',
		scope: {
			selectedCoas: '=',
			selectOnly: '@',
      classificationDirection: '@?'
		},
		templateUrl: '<%=asset_path("course_of_actions/coa_browser.html",type: :template)%>',
		controller: ['$scope','$rootScope','Restangular','Marking', 'CiapCommon', function($scope,$rootScope,Restangular,Marking,CiapCommon) {
			$scope.CiapCommon = CiapCommon;
			$scope.q = '';
			$scope.metadata = { total_count: 0 };

			$scope.sortOptions = {
				'title' : 'asc',
				'description' : 'asc'
			};

    	if (angular.isUndefined($scope.offset)) {
      	$scope.offset = 0;
    	}
    	if (angular.isUndefined($scope.amount)) {
      	$scope.amount = $rootScope.setting_value('DEFAULT_MAX_RECORDS');
    	}

    	$scope.startSearch = function() {
        $scope.offset=0;
        $scope.searchCoas($scope.offset);
      }

			$scope.searchCoas = function(offset) {
				$scope.fetching = true;
				$scope.offset = offset;

        var curr_obj = CiapCommon.fetch_markings_object_from_scope($scope);
        var curr_markings = curr_obj.stix_markings_attributes;
        if (!$rootScope.is_undefined_or_null(curr_obj.acs_set_id)){
        	Restangular.one('acs_sets').get({id: curr_obj.acs_set_id}).then(function(data){
            // set it equal to the existing markings
            if (angular.isDefined(data.stix_markings)){
            	curr_markings = data.stix_markings;
            }
            getCoaList(curr_markings);
        },function(res){
        	toastr.error("Unable to load ACS Set Markings");
        });
        } else {
        	getCoaList(curr_markings);
        }
	    };

	    function getCoaList(current_markings){
	    	var classification_limit = Marking.get_classification_attributes(current_markings);
	    	Restangular.one('/course_of_actions').get({
	    		q: $scope.q,
	    		amount: $scope.amount,
	      	offset: $scope.offset,
          classification_limit: $scope.classificationDirection == "down" ? classification_limit : null,
          classification_greater: $scope.classificationDirection == "up" ? classification_limit : null
	    	}).then(
		    	function(data){
		    		$scope.course_of_actions = data.course_of_actions;
		    		$scope.metadata = data.metadata;
		    		$scope.fetching = false;
		    	},
		    	function(res){
		    		toastr.error("Unable to load Course of Action");
		    		if (angular.isDefined(res)){
		    			$rootScope.show_res_errors(res);
		    		}
		    		$scope.metadata = { total_count: 0 };
		    		$scope.fetching = false;
		    	}
	    	);
	    }

	    $scope.disabled = function(coa) {
	    	if ($scope.checked(coa) && $scope.selectOnly) {
	    		return true;
	    	}
	    	return false;
	    }

	    $scope.checked = function(coa){
	    	return _.findIndex($scope.selectedCoas, function(i){return i.stix_id == coa.stix_id;}) > -1;
	    };

	    $scope.sort = function(method) {
	    	Restangular.one('/course_of_actions').get({q: $scope.q,column: method, direction: $scope.sortOptions[method]}).then(function(data){
	    		$scope.course_of_actions = data.course_of_actions;
	    		if ($scope.sortOptions[method] == 'asc') {
	    			$scope.sortOptions[method] = 'desc';
	    		} else if ($scope.sortOptions[method] == 'desc') {
	    			$scope.sortOptions[method] = 'asc';
	    		}
	    	});
	    }

	    $scope.selectCoa = function(coa,$event) {
	    	var checkbox = $event.target;
	    	if (checkbox.checked){
	    		if (_.findIndex($scope.selectedCoas, function(i){return i.stix_id == coa.stix_id}) == -1){
	    			$scope.selectedCoas.push(coa);
	    		}
	    	} else {
	    		$scope.selectedCoas = _.filter($scope.selectedCoas, function(i){return i.stix_id != coa.stix_id});
	    	}
	    };

		}]
	};
});
