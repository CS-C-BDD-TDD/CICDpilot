<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

app.directive('attackPatternForm', function() {
  return {
    restrict: 'E',
    templateUrl: '<%=asset_path("attack_patterns/form.html",type: :template)%>',
    scope: {
             attackPattern: '=',
             save: '=',
             editform: '='
           },
    controller: ['$scope','$rootScope','$location', 'Restangular', 'Classification', 'ttpService',
      function($scope,$rootScope, $location, Restangular, Classification, ttpService) {
        $scope.sets = [];
        $scope.cybox = "cybox";
        $scope.capec_pattern = /^CAPEC-\d+$/;

        // Toggles for field level markings
        $scope.title_toggle = {toggle: 0, clear: 0};
        $scope.des_toggle = {toggle: 0, clear: 0};
        $scope.capec_toggle = {toggle: 0, clear: 0};

        Restangular.one('acs_sets').get({organization_guid: $rootScope.current_user.organization.guid}).then(function(data) {
          $scope.sets = data;
        },function(res) {
          toastr.error("Unable to load ACS Set List");
        });

        $scope.start_save = function() {
          $scope.is_saving = true;
          $scope.attackPattern.errors = {};

          if ($rootScope.is_undefined_or_null($scope.attackPattern.capec_id)) {
            if ($rootScope.is_undefined_or_null($scope.attackPattern.title)) {
              $scope.attackPattern.errors.title = [" can't be blank if CAPEC ID is not provided"];
            }
          }

          if ($scope.attackPattern.description) {
            if ($rootScope.is_undefined_or_null($scope.attackPattern.title)) {
              $scope.attackPattern.errors.title = [" can't be blank if description is defined"];
            }
          }

          if ($scope.attackPattern.title) {
            if ($rootScope.is_undefined_or_null($scope.attackPattern.description)) {
              $scope.attackPattern.errors.description = [" can't be blank if title is defined"];
            }
          }

          if ($scope.attackPattern.capec_id) {
            if (!$scope.capec_pattern.test($scope.attackPattern.capec_id)) {
              $scope.attackPattern.errors.capec_id = [" must follow the pattern: CAPEC-<one or more digits>"];
            }
          }

          /*
          Rules for when CLASSIFICATION is true

          and ACS Set or Classification must be selected. When Classification is above unclassified,
          details must be filled out.
          */
          if ($rootScope.setting_value('CLASSIFICATION') == true) {
            $scope.attackPattern.stix_markings_attributes = Classification.check_classification_details($scope.attackPattern.stix_markings_attributes);
            var problems = $scope.attackPattern.stix_markings_attributes.problems;
            var classification_check = $scope.attackPattern.stix_markings_attributes.classification_check;
          }
          if (Object.keys($scope.attackPattern.errors).length > 0 || classification_check) {
            $scope.is_saving = false;
            toastr.error("Unable to save Attack Pattern");
            $("html, body").animate({ scrollTop: 0 }, 200);
            if (classification_check) {
              for (var i = 0; i < problems.length; i++) {
                if (problems[i].field == null) {
                  toastr.error("Unable to save due to classification errors in the Object level markings");
                } else {
                  toastr.error("Unable to save due to classification errors in the " + problems[i].field + " markings");
                }
              }
            }
            return;
          }
          $scope.save($scope.attackPattern, function() {
            $scope.is_saving = false;
          })
        };

        $scope.cancel = function() {
          if (ttpService.is_data_set()) {
            var ttp = ttpService.get_data_no_clear();
            if (angular.isDefined(ttp.stix_id)) {
              $location.path('/ttps/' + ttp.stix_id + '/edit');
            } else {
              $location.path('/ttps/new')
            }
          } else {
            if (angular.isDefined($scope.attackPattern.stix_id)) {
              $location.path('/attack_patterns/' + encodeURIComponent($scope.attackPattern.stix_id));
            } else {
              $location.path('/attack_patterns');
            }
          }
        };

      }
    ]
  };
});
