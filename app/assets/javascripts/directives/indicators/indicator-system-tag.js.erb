<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

app.directive('indicatorSystemTag',['$rootScope',function($rootScope) {
  return {
    restrict: 'E',
    scope: {
      indicator:'=?',
      selectedtags:'=?'
    },
    templateUrl: '<%=asset_path("indicators/indicator-system-tag.html",type: :template)%>',

    controller: ['$scope','Restangular',function($scope,Restangular) {
      $scope.availableTags = [];
      $scope.suggestionsIndex = 0;
      $scope.suggestions = [];
      $scope.allowBlur = true;

      $scope.onChange = function(tagName) {
        //reset the list of suggestions if the tagName is length zero && exit
        if(!tagName.length) {
          $scope.suggestions = [];
          return;  
        }

        $scope.suggestionsIndex = 0;

        allTagsPromise = Restangular.all('system_tags').getList();

        if (angular.isDefined($scope.indicator)){
          allTagsPromise.then(function(allTags) {
            $scope.suggestions = _.filter(allTags,function(allTag) {
              allTagName = allTag.name.toLowerCase(); 
              // console.log("[getSystemTags] guid: ",allTag.guid);
              return !_.findWhere($scope.indicator.system_tags,{guid: allTag.guid}) && allTagName.match(tagName.toLowerCase());
            });

          });
        } else {
          allTagsPromise.then(function(allTags) {
            $scope.suggestions = _.filter(allTags,function(allTag) {
              allTagName = allTag.name.toLowerCase(); 
              return !_.findWhere($scope.selectedtags,{guid: allTag.guid}) && allTagName.match(tagName.toLowerCase());
            });
          });
        }
      };

      $scope.$watchCollection('indicator.system_tags',function() {
        $scope.tagName = "";
      });
      
      function resetSuggestions() {
        $scope.suggestionsIndex = 0;
        $scope.suggestions = [];
        $scope.tagName = "";
      };

      //This whole event handler is basically dedicated to maintaining an index on the bounds
      //of the list of suggestions.  When the enter key is pressed, we pluck the indexed
      //element and add it to the list of indicators.
      $scope.onKeyup = function(event) {
        keyCodes = {
          arrowUp: 38,
          arrowDown: 40,
          enter: 13,
          space: 32,
          backspace: 8,
          del: 46,
        };

        // console.log("[onKeyUp] keyCode: ",event.keyCode);

        // if (!($rootScope.can('tag_item_with_system_tag'))) {
        //   return;
        // }

        if (angular.isDefined($scope.indicator)){
          if((event.keyCode == keyCodes.backspace || event.keyCode == keyCodes.del) && ($scope.indicator.system_tags.length > 0) && (($scope.tagName||"").length < 1)) {
            $scope.indicator.system_tags.splice($scope.indicator.system_tags.length-1,1);
          };

          if(event.keyCode == keyCodes.enter && $scope.suggestions.length > 0) {
            suggestion = $scope.suggestions[$scope.suggestionsIndex];
            $scope.indicator.system_tags = $scope.indicator.system_tags.concat(suggestion);
            resetSuggestions();
            // console.log("[onKeyup] Enter.")
          };
        } else {
          if((event.keyCode == keyCodes.backspace ||
              event.keyCode == keyCodes.del) && 
             ($scope.selectedtags.length > 0) && 
             (($scope.tagName||"").length < 1)) {
            $scope.selectedtags.splice($scope.selectedtags.length-1,1);
          };

          if(event.keyCode == keyCodes.enter && $scope.suggestions.length > 0) {
            suggestion = $scope.suggestions[$scope.suggestionsIndex];
            $scope.selectedtags = $scope.selectedtags.concat(suggestion);
            resetSuggestions();
            // console.log("[onKeyup] Enter.")
          };
        }

        if(event.keyCode == keyCodes.arrowDown && $scope.suggestions.length > 0) {
          if($scope.suggestionsIndex >= $scope.suggestions.length-1) {
            $scope.suggestionsIndex = $scope.suggestions.length-1
            return;
          }
          $scope.suggestionsIndex++;
          // console.log("[onKeyup] Arrow Down.")
        };

        if(event.keyCode == keyCodes.arrowUp && $scope.suggestions.length > 0) {
          if($scope.suggestionsIndex < 1) {
            $scope.suggestionsIndex = 0;
            return;
          }
          $scope.suggestionsIndex--;
          // console.log("[onKeyup] Arrow Up.")
        }
      }

      $scope.onAddClick = function(suggestion) {
        // console.log("[onSuggestionClick] suggestion: ",suggestion);
        // if (!($rootScope.can('tag_item_with_system_tag'))) {
        //   return;
        // }       
        if (angular.isDefined($scope.indicator)){
          $scope.indicator.system_tags = ($scope.indicator.system_tags || []).concat(suggestion);
        } else {
          // add to the array of selected tags so we can display to the user what was selected
          $scope.selectedtags = $scope.selectedtags.concat(suggestion);
        }

        resetSuggestions();
        $scope.allowBlur=true;

        // console.log("[onSuggestionClick] suggestion: ",suggestion);
      }

      $scope.onRemoveClick = function(tag) {
        //Users must have permission to remove system tags from indicators
        if (!$rootScope.can('tag_item_with_system_tag')) {
          resetSuggestions();
          return;
        }

        if (angular.isDefined($scope.indicator)){
          index = $scope.indicator.system_tags.indexOf(tag);
          //Mutate indicator.system_tags less the item@index        
          $scope.indicator.system_tags.splice(index,1);
        } else {
          // remove from the array of selected tags so we can display to the user what was selected
          index = $scope.selectedtags.indexOf(tag);
          $scope.selectedtags.splice(index,1);
        }

        resetSuggestions();
        // console.log("[onTagClick] tag: ",tag);
      }

      $scope.updateSuggestionByMouse = function(index) {
        $scope.suggestionsIndex=index;
      }

      $scope.stopBlur = function() {
        $scope.allowBlur=false;
      }

      $scope.blur = function() {
        if ($scope.allowBlur)
        {
          resetSuggestions();
        }
      }
    }]

  };

}])
