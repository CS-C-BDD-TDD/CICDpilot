<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

app.directive('fileSelector', function(){
  return {
    restrict: 'E',
    templateUrl: '<%=asset_path("observables/object-selectors/file-selector.html",type: :template)%>',
    scope: {
      files: '=',
      observableToBeLinked: '=',
      linkObservableView: '='
    },
    controller: ['$scope', 'Restangular', '$rootScope', 'Gfi','Marking','Observable',
      function($scope, Restangular, $rootScope, Gfi,Marking,Observable) {
      $scope.date_picker_opts = {
        defaultRanges: true
      };
      $scope.q = '';
      if (angular.isUndefined($scope.offset)) {
        $scope.offset=0;
      }
      if (angular.isUndefined($scope.amount)) {
        $scope.amount=$rootScope.setting_value('DEFAULT_MAX_RECORDS');
      }

      // Cleanup
      $scope.$on('$destroy', function() {
        $('.daterangepicker').remove();
      });
      
      $scope.dateRangePicker = function(picker) {
        $scope.date_picker_object = picker;
        $scope.offset=0;
        $scope.getFiles($scope.offset);
      };

      $scope.startSearch = function() {
        $scope.offset=0;
        $scope.getFiles($scope.offset);
      };

      $scope.getFiles = function(offset) {
        var curr_ind = Observable.fetch_indicator_from_scope($scope);
        var curr_markings = curr_ind.stix_markings_attributes;
        if (!$rootScope.is_undefined_or_null(curr_ind.acs_set_id)){
          Restangular.one('acs_sets').get({id: curr_ind.acs_set_id}).then(function(data){
            // set it equal to the existing markings
            if (angular.isDefined(data.stix_markings)){
              curr_markings = data.stix_markings;
            }
            getFileList(offset, curr_markings);
          },function(res){
              toastr.error("Unable to load ACS Set Markings");
          });
        } else {
          getFileList(offset, curr_markings);
        }
      };

      function getFileList(offset, current_markings){
        var classification_limit = Marking.get_classification_attributes(current_markings);
        if (angular.isDefined($scope.metadata)) {
          $scope.metadata.total_count = null;
        }
        Restangular.one("/files").get({
          ebt: $scope.date_picker_object.getStartDate(),
          iet: $scope.date_picker_object.getEndDate(),
          q: $scope.q,
          amount: $scope.amount,
          classification_limit: classification_limit,
          offset: offset
        }).then(
          function(data){
            $scope.files = data.files;
            $scope.metadata = data.metadata;
          },
          function(res){
            toastr.error("Unable to load Files");
          }
        );
      }

      $scope.setSelected = function() {
        var so=$scope.observableToBeLinked;

        if (angular.isDefined(so)) {
          if (so.remote_object_id===this.file.cybox_object_id && so.remote_object_type==='CyboxFile') {
            $scope.observableToBeLinked={};
          } else {
            $scope.observableToBeLinked={remote_object_id:this.file.cybox_object_id,remote_object_type:'CyboxFile',file:this.file};
          }
        }
      }
      $scope.classSelected = function() {
        var so=$scope.observableToBeLinked;

        if (angular.isDefined(so)) {
          if (so.remote_object_id===this.file.cybox_object_id && so.remote_object_type==='CyboxFile') {
            return "bg-primary";
          }
        }
      }
      $scope.$watch('date_picker_object',function(object) {
        if (angular.isDefined(object)) {
          $scope.getFiles($scope.offset);
        }
      });
      $rootScope.$on('reloadObservableSelect',function(event,type) {if (type === 'CyboxFile') {$scope.getFiles($scope.offset)}});

      // setEdit is a special function because it's called by an ng-click within an ng-repeat
      $scope.setEdit = function() {
        Restangular.one('/files/'+ this.file.cybox_object_id).get().then(function(data){
          // If you change anything here you need to also change it in the edit.js.erb in controllers for edit!!!
          // we need to add in the spoof the file hashes stix markings into the stix_markings array for editing
          if(!$rootScope.is_undefined_or_null(data.md5_stix_markings)){
              data.md5_stix_markings[0].remote_object_field = "md5";
              data.stix_markings.push(data.md5_stix_markings[0]);
          }
          if(!$rootScope.is_undefined_or_null(data.sha1_stix_markings)){
              data.sha1_stix_markings[0].remote_object_field = "sha1";
              data.stix_markings.push(data.sha1_stix_markings[0]);
          }
          if(!$rootScope.is_undefined_or_null(data.sha256_stix_markings)){
              data.sha256_stix_markings[0].remote_object_field = "sha256";
              data.stix_markings.push(data.sha256_stix_markings[0]);
          }
          if(!$rootScope.is_undefined_or_null(data.ssdeep_stix_markings)){
              data.ssdeep_stix_markings[0].remote_object_field = "ssdeep";
              data.stix_markings.push(data.ssdeep_stix_markings[0]);
          }
            
          $scope.file = Marking.translate_existing_attributes(data);

          Gfi.init_gfi_edit($scope, $scope.file);
          $scope.$parent.$parent.selected = $scope.file;
          $scope.$parent.observableToBeLinked={remote_object_id:$scope.file.cybox_object_id,remote_object_type:'CyboxFile',file:$scope.file};
          $scope.linkObservableView = 'edit';
        },function(res){
            toastr.error("Unable to load File");
        });
      }

      $scope.$parent.$parent.after_file_save = function() {
        var match = _.find($scope.$parent.$parent.files,{'cybox_object_id':data.cybox_object_id});
        var index = _.indexOf($scope.$parent.$parent.files, match);
        $scope.$parent.$parent.files.splice(index,1,data);
        $scope.$parent.observableToBeLinked.file=data;
        $scope.$parent.$parent.showSelectedObservable();
        if ($rootScope.setting_value('CLASSIFICATION') == true){
          $rootScope.$emit('reloadObservableSelect', 'CyboxFile');
        }
      }
    }],
    controllerAs: 'fileSelCtrl'
  }
});
