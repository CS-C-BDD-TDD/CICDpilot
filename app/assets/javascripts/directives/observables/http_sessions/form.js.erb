<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

app.directive('httpSessionForm', function(){
  return {
    restrict: 'E',
    templateUrl: '<%=asset_path("observables/http_sessions/form.html",type: :template)%>',
    scope: {
             httpsession: '=',
             saved: '=',
             failed: '=',
             cancel: '=',
             editform: '='
           },
    controller: ['$scope','$rootScope','Observable','Restangular', 'CiapCommon', 'Classification',
      function($scope,$rootScope,Observable,Restangular, CiapCommon, Classification) {
        $scope.Observable = Observable;
        $scope.sets = [];
        $scope.cybox = "cybox";

        // Toggles for field level markings
        $scope.user_agent_toggle = {toggle: 0, clear: 0};
        $scope.domain_name_toggle = {toggle: 0, clear: 0};
        $scope.port_toggle = {toggle: 0, clear: 0};
        $scope.referer_toggle = {toggle: 0, clear: 0};
        $scope.pragma_toggle = {toggle: 0, clear: 0};
        $scope.conditions = CiapCommon.conditions;

        Restangular.one('acs_sets').get({organization_guid: $rootScope.current_user.organization.guid}).then(function(data){
            $scope.sets = data;
        },function(res){
            toastr.error("Unable to load ACS Set List");
        });

        $scope.save = function(http_session){
          $scope.is_saving = true;
          $scope.httpsession.errors = {};

          var promise;
          var save_text;

          /*
          Rules for when CLASSIFICATION is true

          and ACS Set or Classification must be selected. When Classification is above unclassified, 
          details must be filled out.
          */
          if ($rootScope.setting_value('CLASSIFICATION') == true){
              $scope.httpsession.stix_markings_attributes = Classification.check_classification_details($scope.httpsession.stix_markings_attributes);
              var problems = $scope.httpsession.stix_markings_attributes.problems;
              var classification_check = $scope.httpsession.stix_markings_attributes.classification_check;
          }

          if (Object.keys($scope.httpsession.errors).length > 0 || classification_check) {
            $scope.is_saving = false;
            
            if(classification_check){
              for (var i = 0; i < problems.length; i++){
                  if(problems[i].field == null){
                      toastr.error("Unable to save due to classification errors in the Object level markings");
                  } else {
                      toastr.error("Unable to save due to classification errors in the " + problems[i].field + " markings");
                  }
              }
            }
            return;
          }

          if (angular.isUndefined(http_session.cybox_object_id) || http_session.cybox_object_id == null) {
            promise = Restangular.all("http_sessions").post(http_session);
            save_text = "save";
          } else {
            promise = Restangular.one("http_sessions/" + http_session.cybox_object_id).customPUT(http_session)
            save_text = "update";
          }

          promise.then(
            function(data){
              toastr.success("Http Session "+save_text+"d");
              if (angular.isDefined($scope.saved) && jQuery.isFunction($scope.saved)){
                $scope.saved(data);
              }
              $scope.is_saving = false;
            },
            function(res){
              toastr.error("Unable to "+save_text+" http session observable");
              $scope.error = res.data.errors;
              if (angular.isDefined(res.data) && angular.isDefined(res.data.errors) && angular.isDefined(res.data.errors.base)) {
                  _.each(res.data.errors.base,function(e){
                      toastr.error(e);
                  });
              }
              if (angular.isDefined($scope.failed) && jQuery.isFunction($scope.failed)){
                $scope.failed(res.data);
              }
              $scope.is_saving = false;
            }
          );
        };
      }
    ]
  };
});
