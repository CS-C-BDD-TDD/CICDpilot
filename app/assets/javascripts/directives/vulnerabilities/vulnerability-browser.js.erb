<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

app.directive('vulnerabilityBrowser', function(){
  return {
    restrict: 'E',
    scope: {
      selectedVulnerabilities: '=',
      selectOnly: '@',
      classificationDirection: '@?'
    },
    templateUrl: '<%=asset_path("vulnerabilities/vulnerability-browser.html",type: :template)%>',
    controller: ['$scope','$rootScope','Restangular','Marking', 'Vulnerability', function($scope,$rootScope,Restangular,Marking, Vulnerability) {
      $scope.q = '';
      $scope.Vulnerability = Vulnerability;

      $scope.sortOptions = {
        'title' : 'asc',
        'description' : 'asc',
        'cve_id' : 'asc',
        'oscbd_id' : 'asc'
      };

      $scope.searchVulnerabilities = function() {
        $scope.fetching = true;
        var curr_obj = Vulnerability.fetch_markings_object_from_scope($scope);
        var curr_markings = curr_obj.stix_markings_attributes;
        if (!$rootScope.is_undefined_or_null(curr_obj.acs_set_id)){
          Restangular.one('acs_sets').get({id: curr_obj.acs_set_id}).then(function(data){
            // set it equal to the existing markings
            if (angular.isDefined(data.stix_markings)){
              curr_markings = data.stix_markings;
            }
            getVulnerabilityList(curr_markings);
          },function(res){
              toastr.error("Unable to load ACS Set Markings");
          });
        } else {
          getVulnerabilityList(curr_markings);
        }
      };

      function getVulnerabilityList(current_markings){
        var classification_limit = Marking.get_classification_attributes(current_markings);
        Restangular.one('/vulnerabilities').get({
          q: $scope.q,
          classification_limit: $scope.classificationDirection == "down" ? classification_limit : null,
          classification_greater: $scope.classificationDirection == "up" ? classification_limit : null
        }).then(
          function(data){
            $scope.vulnerabilities = data.vulnerabilities;
            $scope.fetching = false;
        },
          function(res){
            toastr.error("Unable to load Vulnerabilities");
            $scope.fetching = false;
          }
        );
      }

      $scope.disabled = function(vulnerability) {
         if ($scope.checked(vulnerability) && $scope.selectOnly) {
             return true;
         }
         return false;
      }

      $scope.checked = function(vulnerability){
        return _.findIndex($scope.selectedVulnerabilities, function(i){return i.guid == vulnerability.guid;}) > -1;
      };

      $scope.sort = function(method) {
        Restangular.one('/vulnerabilities').get({q: $scope.q,column: method, direction: $scope.sortOptions[method]}).then(function(data){
          $scope.vulnerabilities = data.vulnerabilities;
          if ($scope.sortOptions[method] == 'asc') {
            $scope.sortOptions[method] = 'desc';
          }
          else if ($scope.sortOptions[method] == 'desc') {
            $scope.sortOptions[method] = 'asc';
          }
        });
      }

      $scope.selectVulnerability = function(vulnerability,$event) {
        var checkbox = $event.target;
        if (checkbox.checked){
          if (_.findIndex($scope.selectedVulnerabilities, function(i){return i.guid == vulnerability.guid}) == -1){
            $scope.selectedVulnerabilities.push(vulnerability);
          }
        } else {
          $scope.selectedVulnerabilities = _.filter($scope.selectedVulnerabilities, function(i){return i.guid != vulnerability.guid});
        }
      };
    }]
  };
});
