class ExploitTargetSerializer < Serializer
  attributes :stix_id,
             :created_at,
             :updated_at,
             :guid,
             :acs_set_id,
             :portion_marking,
             :read_only,
             :is_ciscp,
             :is_mifr,
             :feeds
             
  associate :badge_statuses do single? end

  associate :stix_packages, {
    except: :id, 
    include: [:acs_set,  badge_statuses: {
      except: [
        :guid,
        :remote_object_id,
        :remote_object_type,
        :system,
        :created_at,
        :updated_at
      ]
    }]
  } do single? end

  associate :vulnerabilities, {except: :id} do single? end

  associate :course_of_actions, {except: :id} do single? end

  associate :audits, {
    except: [
      :id, 
      :old_justification, 
      :audit_subtype, 
      :item_type_audited, 
      :item_guid_audited, 
      :guid
    ],
    include: [
      user: {
        only: [:guid, :username, :id]
      }
    ]
  } do single? end

  associate :ttps do single? end

  associate :created_by_user, {
    except: [
      :api_key_secret_encrypted,
      :failed_login_attempts,
      :hidden_at,
      :locked_at,
      :logged_in_at,
      :notes,
      :organization_guid,
      :password_change_required,
      :password_changed_at,
      :password_hash,
      :password_salt,
      :r5_id,
      :throttle
    ],
    include: [
      groups: {except: [:created_by_id, :updated_by_id]},
      organization: {except: [:acs_sets_org_id, :category, :r5_id, :releasability_mask]}
    ]
  } do single? end

  node :stix_markings, ->{single?} do |exploit_target|
    if exploit_target.class == ExploitTarget
      stix_markings = exploit_target.stix_markings
      stix_markings += exploit_target.acs_set.stix_markings if exploit_target.acs_set.present?
      stix_markings
    end
  end

  associate :acs_set, {only: [:guid,:name,:portion_marking]} do single? end
end