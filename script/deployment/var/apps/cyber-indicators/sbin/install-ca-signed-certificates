# This file is automatically generated by the Cyber Indicators application
#
# DO NOT MODIFY THIS FILE
#!/bin/bash

check_prerequisites()
{
    PREREQ_CHECK_ERROR_MSG="\nPREREQUISITE CHECK FAILED: You must correct this issue before attempting to run this script again.\n"
    echo -e "\nCHECKING PREREQUISITES:\n"
    echo -n "Checking for Java keytool binary: $KEYTOOL_BIN..."
    if [[ -f "$KEYTOOL_BIN" && -x "$KEYTOOL_BIN" ]]; then
        echo "OK"
    elif [[ -f "$KEYTOOL_BIN" ]]; then
        echo -e "FAILED\n- Not executable for current user\n$PREREQ_CHECK_ERROR_MSG"
        exit 1
    elif [[ -n "$(which keytool)" ]]; then
        echo -e "WARNING\n- Does not exist or is not readable\n- Perhaps JAVA_HOME is not set properly"
        export KEYTOOL_BIN="$(which keytool)"
        echo -n "Checking for Java keytool binary in path: $KEYTOOL_BIN..."
        if [[ -f "$KEYTOOL_BIN" && -x "$KEYTOOL_BIN" ]]; then
            echo "OK"
        elif [[ -f "$KEYTOOL_BIN" ]]; then
            echo -e "FAILED\n- Not executable for current user\n$PREREQ_CHECK_ERROR_MSG"
            exit 1
        else
            echo -e "FAILED\n- Does not exist or is not readable\n$PREREQ_CHECK_ERROR_MSG"
            exit 2
        fi
    else
        echo -e "FAILED\n- Does not exist or is not readable\n$PREREQ_CHECK_ERROR_MSG"
        exit 2
    fi
    echo -n "Checking for openssl binary: $OPENSSL_BIN..."
    if [[ -n "$OPENSSL_BIN" && -f "$OPENSSL_BIN" && -x "$OPENSSL_BIN" ]]; then
        echo "OK"
    elif [[ -n "$OPENSSL_BIN" && -f "$OPENSSL_BIN" ]]; then
        echo -e "FAILED\n- Not executable for current user\n$PREREQ_CHECK_ERROR_MSG"
        exit 11
    else
        echo -e "FAILED\n- Does not exist or is not readable\n$PREREQ_CHECK_ERROR_MSG"
        exit 12
    fi
    echo -n "Checking status of backup directory: $BACKUP_FILES_DIR..."
    if [[ -d "$BACKUP_FILES_DIR" && -w "$BACKUP_FILES_DIR" && -z "$(ls -A "$BACKUP_FILES_DIR")" ]]; then
        echo "OK"
    elif [[ -d "$BACKUP_FILES_DIR" && -w "$BACKUP_FILES_DIR" ]]; then
        echo -e "FAILED\n- Directory not empty\n$PREREQ_CHECK_ERROR_MSG"
        exit 36
    elif [[ -d "$BACKUP_FILES_DIR" ]]; then
        echo -e "FAILED\n- Directory not writable\n$PREREQ_CHECK_ERROR_MSG"
        exit 37
    else
        mkdir -p "$BACKUP_FILES_DIR"
        if [[ -d "$BACKUP_FILES_DIR" && -w "$BACKUP_FILES_DIR" && -z "$(ls -A "$BACKUP_FILES_DIR")" ]]; then
            echo -e "OK\n- Successfully created the backup directory"
        else
            echo -e "FAILED\n- Failed to create the backup directory\n$PREREQ_CHECK_ERROR_MSG"
            exit 38
        fi
    fi
    echo -n "Checking for server certificate: $SRC_FILES_DIR/$HOST.crt..."
    if [[ -f "$SRC_FILES_DIR/$HOST.crt" ]]; then
        echo "OK"
    else
        echo -e "FAILED\n- Does not exist or is not readable\n$PREREQ_CHECK_ERROR_MSG"
        exit 42
    fi
    echo -n "Checking for server private key: $SRC_FILES_DIR/$HOST.key..."
    if [[ -f "$SRC_FILES_DIR/$HOST.key" ]]; then
        echo "OK"
    else
        echo -e "FAILED\n- Does not exist or is not readable\n$PREREQ_CHECK_ERROR_MSG"
        exit 52
    fi
    echo -n "Checking that the CA bundle is not a symlink: $CA_BUNDLE_PATH..."
    if [[ -f "$CA_BUNDLE_PATH" && ! -h "$CA_BUNDLE_PATH" ]]; then
        echo "OK"
    elif [[ -f "$CA_BUNDLE_PATH" ]]; then
        cat "$CA_BUNDLE_PATH" > "$CA_BUNDLE_PATH.tmp" || { echo -e "FAILED\n- Failed to copy symlinked file to a regular file\n$PREREQ_CHECK_ERROR_MSG" ; exit 23 ; }
        unlink "$CA_BUNDLE_PATH" || { echo -e "FAILED\n- Failed to unlink the symlinked file\n$PREREQ_CHECK_ERROR_MSG" ; exit 24 ; }
        mv "$CA_BUNDLE_PATH.tmp" "$CA_BUNDLE_PATH" || { echo -e "FAILED\n- Failed to replace the symlinked file with a regular file copy\n$PREREQ_CHECK_ERROR_MSG" ; exit 25 ; }
        echo -e "OK\n- Successfully replaced with target of symlink"
    else
        echo -e "FAILED\n- Does not exist or is not readable\n$PREREQ_CHECK_ERROR_MSG"
        exit 22
    fi
    echo -n "Checking that the Java keystore is not a symlink: $JAVA_KEYSTORE_PATH..."
    if [[ -f "$JAVA_KEYSTORE_PATH" && ! -h "$JAVA_KEYSTORE_PATH" ]]; then
        echo "OK"
    elif [[ -f "$JAVA_KEYSTORE_PATH" ]]; then
        cat "$JAVA_KEYSTORE_PATH" > "$JAVA_KEYSTORE_PATH.tmp" || { echo -e "FAILED\n- Failed to copy symlinked file to a regular file\n$PREREQ_CHECK_ERROR_MSG" ; exit 63 ; }
        unlink "$JAVA_KEYSTORE_PATH" || { echo -e "FAILED\n- Failed to unlink the symlinked file\n$PREREQ_CHECK_ERROR_MSG" ; exit 64 ; }
        mv "$JAVA_KEYSTORE_PATH.tmp" "$JAVA_KEYSTORE_PATH" || { echo -e "FAILED\n- Failed to replace the symlinked file with a regular file copy\n$PREREQ_CHECK_ERROR_MSG" ; exit 65 ; }
        echo -e "OK\n- Successfully replaced with target of symlink"
    else
        echo -e "FAILED\n- Does not exist or is not readable\n$PREREQ_CHECK_ERROR_MSG"
        exit 62
    fi
    echo -n "Checking that the Tomcat keystore is not a symlink: $TC_KEYSTORE_PATH..."
    if [[ -f "$TC_KEYSTORE_PATH" && ! -h "$TC_KEYSTORE_PATH" ]]; then
        echo "OK"
    elif [[ -f "$TC_KEYSTORE_PATH" ]]; then
        cat "$TC_KEYSTORE_PATH" > "$TC_KEYSTORE_PATH.tmp" || { echo -e "FAILED\n- Failed to copy symlinked file to a regular file\n$PREREQ_CHECK_ERROR_MSG" ; exit 83 ; }
        unlink "$TC_KEYSTORE_PATH" || { echo -e "FAILED\n- Failed to unlink the symlinked file\n$PREREQ_CHECK_ERROR_MSG" ; exit 84 ; }
        mv "$TC_KEYSTORE_PATH.tmp" "$TC_KEYSTORE_PATH" || { echo -e "FAILED\n- Failed to replace the symlinked file with a regular file copy\n$PREREQ_CHECK_ERROR_MSG" ; exit 85 ; }
        echo -e "OK\n- Successfully replaced with target of symlink"
    else
        echo -e "FAILED\n- Does not exist or is not readable\n$PREREQ_CHECK_ERROR_MSG"
        exit 82
    fi
    echo -e "\nPREREQUISITE CHECK...PASSED"
}

backup_keystores() {
    if [[ -f "$TC_KEYSTORE_PATH" ]]; then
        mv "$TC_KEYSTORE_PATH" "$BACKUP_FILES_DIR/tomcat_cacerts"
    else
        mkdir -p "$(dirname "$TC_KEYSTORE_PATH")"
    fi
    if [[ -f "$JAVA_KEYSTORE_PATH" ]]; then
        cp -a "$JAVA_KEYSTORE_PATH" "$BACKUP_FILES_DIR/java_cacerts"
    else
        mkdir -p "$(dirname "$JAVA_KEYSTORE_PATH")"
    fi
}

delete_ca_certs()
{
    for ca_cert_file in "$@"; do
        if [[ -f "$ca_cert_file" && "$(basename "$ca_cert_file")" != "ca-bundle.crt" ]]; then
            echo -e "\nProcessing certificate file: $ca_cert_file"
            echo -n "- Removing certificate from CA certificate bundle..."
            cmd_result="$(diff --strip-trailing-cr "$ca_cert_file" "$CA_BUNDLE_PATH" | grep "^> " | sed s/^\>\ // > "$CA_BUNDLE_PATH.tmp" 2>&1)"
            if [[ -z "$cmd_result" ]]; then
                echo "OK"
            else
                echo -e "FAILED\n- $cmd_result"
            fi
            cat "$CA_BUNDLE_PATH.tmp" > "$CA_BUNDLE_PATH"
            echo -n "- Deleting possible alias from the Java keystore..."
            cmd_result="$($KEYTOOL_BIN -delete -alias "$(basename "$ca_cert_file" .crt | tr ' \t' '_')" -keystore "$JAVA_KEYSTORE_PATH" -storetype JKS -storepass "$JAVA_KEYPASS" 2>&1 | sed "s/^.*Alias .*$(basename "$ca_cert_file" .crt | tr ' \t' '_').* does not exist$//")"
            if [[ -z "$cmd_result" ]]; then
                echo "OK"
            else
                echo -e "FAILED\n- $cmd_result"
            fi
        fi
    done
    if [[ -f "$CA_BUNDLE_PATH.tmp" ]]; then
        rm -f "$CA_BUNDLE_PATH.tmp"
    fi
}

backup_certs_keys_and_p12()
{
    if [[ -f "$CA_BUNDLE_PATH" ]]; then
        cp -a "$CA_BUNDLE_PATH" "$BACKUP_FILES_DIR/"
    fi

    if [[ -h "$TLS_PATH/certs/localhost.crt" ]]; then
        unlink "$TLS_PATH/certs/localhost.crt"
    elif [[ -f "$TLS_PATH/certs/localhost.crt" ]]; then
        mv "$TLS_PATH/certs/localhost.crt" "$BACKUP_FILES_DIR/"
    fi

    if [[ -f "$TLS_PATH/certs/$HOST.crt" ]]; then
        mv "$TLS_PATH/certs/$HOST.crt" "$BACKUP_FILES_DIR/"
    fi

    if [[ -h "$TLS_PATH/private/localhost.key" ]]; then
        unlink "$TLS_PATH/private/localhost.key"
    elif [[ -f "$TLS_PATH/private/localhost.key" ]]; then
        mv "$TLS_PATH/private/localhost.key" "$BACKUP_FILES_DIR/"
    fi

    if [[ -f "$TLS_PATH/private/$HOST.key" ]]; then
        mv "$TLS_PATH/private/$HOST.key" "$BACKUP_FILES_DIR/"
    fi

    if [[ -h "$TLS_PATH/private/localhost.p12" ]]; then
        unlink "$TLS_PATH/private/localhost.p12"
    elif [[ -f "$TLS_PATH/private/localhost.p12" ]]; then
        mv "$TLS_PATH/private/localhost.p12" "$BACKUP_FILES_DIR/"
    fi

    if [[ -h "$TLS_PATH/cert.pem" ]]; then
        unlink "$TLS_PATH/cert.pem"
    elif [[ -f "$TLS_PATH/cert.pem" ]]; then
        mv "$TLS_PATH/cert.pem" "$BACKUP_FILES_DIR/"
    fi

    if [[ -f "$TLS_PATH/private/$HOST.p12" ]]; then
        mv "$TLS_PATH/private/$HOST.p12" "$BACKUP_FILES_DIR/"
    fi

    if [[ -f "$TLS_PATH/certs/$HOST.ca-chain.crt" ]]; then
        mv "$TLS_PATH/certs/$HOST.ca-chain.crt" "$BACKUP_FILES_DIR/"
    fi

    for ca_cert_file in "$SRC_FILES_DIR/"*CA*.crt; do
        if [[ -f "$TLS_PATH/certs/$(basename "$ca_cert_file")" ]]; then
            mv "$TLS_PATH/certs/$(basename "$ca_cert_file")" "$BACKUP_FILES_DIR/"
        fi
    done
}

copy_host_cert_and_key()
{
    echo -e "\nInstalling certificate: $HOST.crt"
    echo -n "- Copying certificate into place..."
    sed "s/\r$//" "$SRC_FILES_DIR/$HOST.crt" > "$TLS_PATH/certs/$HOST.crt" && echo "OK"
    echo -n "- Setting permissions on certificate to 755..."
    chmod 755 "$TLS_PATH/certs/$HOST.crt" && echo "OK"
    echo -n "- Setting ownership of certificate to $TC_USER_NAME:$SUPERUSER_GROUP_NAME..."
    chown $TC_USER_NAME:$SUPERUSER_GROUP_NAME "$TLS_PATH/certs/$HOST.crt" && echo "OK"
    echo -n "- Creating localhost.crt symlink to certificate..."
    cd "$TLS_PATH/certs"
    ln -s "$HOST.crt" "localhost.crt" && echo "OK"
    cd ~-
    echo -e "\nInstalling private key: $HOST.key"
    echo -n "- Copying private key into place..."
    sed "s/\r$//" "$SRC_FILES_DIR/$HOST.key" > "$TLS_PATH/private/$HOST.key" && echo "OK"
    echo -n "- Setting permissions on private key to 700..."
    chmod 700 "$TLS_PATH/private/$HOST.key" && echo "OK"
    echo -n "- Setting ownership of private key to $TC_USER_NAME:$SUPERUSER_GROUP_NAME..."
    chown $TC_USER_NAME:$SUPERUSER_GROUP_NAME "$TLS_PATH/private/$HOST.key" && echo "OK"
    echo -n "- Creating localhost.key symlink to private key..."
    cd "$TLS_PATH/private"
    ln -s "$HOST.key" "localhost.key" && echo "OK"
    cd ~-
}

create_host_p12()
{
    echo -e "\nRegenerating and installing PKCS #12 store: $HOST.p12"
    echo -n "- Generating the PKCS #12 store from certificate and private key..."
    cmd_result="$($OPENSSL_BIN pkcs12 -export -name "$HOST_CERT_NAME" -in "$TLS_PATH/certs/$HOST.crt" -inkey "$TLS_PATH/private/$HOST.key" -out "$TLS_PATH/private/$HOST.p12" -passin env:PK_KEYPASS -passout env:P12_KEYPASS -CAfile "$CA_BUNDLE_PATH" -chain 2>&1)"
    if [[ -z "$cmd_result" ]]; then
        echo "OK"
    elif [[ "$cmd_result" = "Error unable to get local issuer certificate getting chain." ]]; then
        echo -e "FAILED\n- There was a FATAL ERROR adding the full CA trust chain for the server certificate from the CA bundle file."
        echo -e "\nSCRIPT FAILED BECAUSE THE PKCS #12 STORE FILE COULD NOT BE RECREATED."
        echo -e "- Ensure that all necessary CA certificates in the trust chain are provided in"
        echo -e "  the source files directory and that there are no invalid or obsolete"
        echo -e "  certificates in the CA bundle file that have not been provided in the"
        echo -e "  obsolete files directory to be removed before running the script again.\n"
        exit 79
    else
        echo -e "FAILED\n- $cmd_result"
    fi
    echo -n "- Setting permissions on PKCS #12 store to 700..."
    chmod 700 "$TLS_PATH/private/$HOST.p12" && echo "OK"
    echo -n "- Setting ownership of PKCS #12 store to $TC_USER_NAME:$SUPERUSER_GROUP_NAME..."
    chown $TC_USER_NAME:$SUPERUSER_GROUP_NAME "$TLS_PATH/private/$HOST.p12" && echo "OK"
    echo -n "- Creating localhost.p12 symlink to PKCS #12 store..."
    cd "$TLS_PATH/private"
    ln -s "$HOST.p12" "localhost.p12" && echo "OK"
    cd ~-
}

delete_cert_aliases()
{
    echo -e "\nDeleting server certificate aliases from the Java keystore:"
    for cert_alias in $HOST_CERT_ALIASES; do
        echo -n "- Deleting $cert_alias..."
        cmd_result="$($KEYTOOL_BIN -delete -alias "$cert_alias" -keystore "$JAVA_KEYSTORE_PATH" -storetype JKS -storepass "$JAVA_KEYPASS" 2>&1 | sed "s/^.*Alias .*$cert_alias.* does not exist$//")"
        if [[ -z "$cmd_result" ]]; then
            echo "OK"
        else
            echo -e "FAILED\n- $cmd_result"
        fi
    done
}

import_ca_certs()
{
    for ca_cert_file in "$@"; do
        if [[ -f "$ca_cert_file" ]]; then
            echo -e "\nProcessing CA certificate file: $(basename "$ca_cert_file")"
            echo -n "- Copying CA certificate into place..."
            sed "s/\r$//" "$ca_cert_file" > "$TLS_PATH/certs/$(basename "$ca_cert_file")" && echo "OK"
            echo -n "- Setting permissions on CA certificate to 755..."
            chmod 755 "$TLS_PATH/certs/$(basename "$ca_cert_file")" && echo "OK"
            echo -n "- Setting ownership of CA certificate to $TC_USER_NAME:$SUPERUSER_GROUP_NAME..."
            chown $TC_USER_NAME:$SUPERUSER_GROUP_NAME "$TLS_PATH/certs/$(basename "$ca_cert_file")" && echo "OK"
            echo -n "- Appending CA certificate to CA certificate bundle..."
            sed "s/\r$//" "$ca_cert_file" >> "$CA_BUNDLE_PATH" && echo "OK"
            echo -n "- Importing as a trusted CA certificate into the Java keystore..."
            cmd_result="$($KEYTOOL_BIN -importcert -trustcacerts -noprompt -alias "$(basename "$ca_cert_file" .crt | tr ' \t' '_')" -file "$ca_cert_file" -keystore "$JAVA_KEYSTORE_PATH" -storetype JKS -storepass "$JAVA_KEYPASS" 2>&1 | sed "s/Certificate was added to keystore//")"
            if [[ -z "$cmd_result" ]]; then
                echo "OK"
            else
                echo -e "FAILED\n- $cmd_result"
            fi
            echo -n "- Importing as a trusted CA certificate into the Tomcat keystore..."
            cmd_result="$($KEYTOOL_BIN -importcert -trustcacerts -noprompt -alias "$(basename "$ca_cert_file" .crt | tr ' \t' '_')" -file "$ca_cert_file" -keystore "$TC_KEYSTORE_PATH" -storetype JKS -storepass "$TC_KEYPASS" 2>&1 | sed "s/Certificate was added to keystore//")"
            if [[ -z "$cmd_result" ]]; then
                echo "OK"
            else
                echo -e "FAILED\n- $cmd_result"
            fi
        fi
    done
    echo -e "\nConfiguring CA certificate bundle: $CA_BUNDLE_PATH"
    echo -n "- Creating cert.pem symlink to CA certificate bundle..."
    cd "$TLS_PATH"
    ln -s "$CA_BUNDLE_PATH" "cert.pem" && echo "OK"
    cd ~-
}

import_cert_aliases()
{
    for cert_alias in $HOST_CERT_ALIASES; do
        echo -e "\nImporting server certificate with alias: $cert_alias"
        echo -n "- Importing alias into the Java keystore..."
        cmd_result="$($KEYTOOL_BIN -importkeystore -srcalias "$HOST_CERT_NAME" -srckeystore "$TLS_PATH/private/$HOST.p12" -srcstoretype pkcs12 -srcstorepass "$P12_KEYPASS" -destalias "$cert_alias" -destkeystore "$JAVA_KEYSTORE_PATH" -deststoretype JKS -deststorepass "$JAVA_KEYPASS" 2>&1)"
        if [[ -z "$cmd_result" ]]; then
            echo "OK"
        else
            echo -e "FAILED\n- $cmd_result"
        fi
        echo -n "- Importing alias into the Tomcat keystore..."
        cmd_result="$($KEYTOOL_BIN -importkeystore -srcalias "$HOST_CERT_NAME" -srckeystore "$TLS_PATH/private/$HOST.p12" -srcstoretype pkcs12 -srcstorepass "$P12_KEYPASS" -destalias "$cert_alias" -destkeystore "$TC_KEYSTORE_PATH" -deststoretype JKS -deststorepass "$TC_KEYPASS" 2>&1)"
        if [[ -z "$cmd_result" ]]; then
            echo "OK"
        else
            echo -e "FAILED\n- $cmd_result"
        fi
    done
}

main()
{
    export FS_ROOT=${FS_ROOT:=''}
    export JAVA_HOME=${JAVA_HOME:="$FS_ROOT/usr/java/cyber-indicators"}
    export KEYTOOL_BIN=${KEYTOOL_BIN:="$JAVA_HOME/bin/keytool"}
    export OPENSSL_BIN=${OPENSSL_BIN:="$(which openssl)"}
    export HOST=${HOST:="$(hostname -f)"}
    export PK_KEYPASS=${PK_KEYPASS:=changeit}
    export P12_KEYPASS=${P12_KEYPASS:="$PK_KEYPASS"}
    export TC_KEYPASS=${TC_KEYPASS:="$PK_KEYPASS"}
    export JAVA_KEYPASS=${JAVA_KEYPASS:="$PK_KEYPASS"}
    export TC_KEYSTORE_PATH=${TC_KEYSTORE_PATH:="$FS_ROOT/usr/share/tomcat7/keystore/cacerts"}
    export JAVA_KEYSTORE_PATH=${JAVA_KEYSTORE_PATH:="$FS_ROOT/etc/pki/java/cacerts"}
    export SRC_FILES_DIR=${SRC_FILES_DIR:="$(pwd)"}
    export OBSOLETE_FILES_DIR=${OBSOLETE_FILES_DIR:="$SRC_FILES_DIR/obsolete_files"}
    export BACKUP_FILES_DIR=${BACKUP_FILES_DIR:="$SRC_FILES_DIR/backup_files"}
    export TLS_PATH=${TLS_PATH:="$FS_ROOT/etc/pki/tls"}
    export CA_BUNDLE_PATH=${CA_BUNDLE_PATH:="$TLS_PATH/certs/ca-bundle.crt"}
    export HOST_CERT_ALIASES=${HOST_CERT_ALIASES:="cyber-indicators search $HOST"}
    export HOST_CERT_NAME=${HOST_CERT_NAME:="cyber-indicators"}
    export TC_USER_NAME=${TC_USER_NAME:="tomcat"}
    export TC_GROUP_NAME=${TC_GROUP_NAME:="tomcat"}
    export SUPERUSER_USER_NAME=${SUPERUSER_USER_NAME:="root"}
    export SUPERUSER_GROUP_NAME=${SUPERUSER_GROUP_NAME:="root"}

    check_prerequisites
    backup_keystores
    backup_certs_keys_and_p12
    copy_host_cert_and_key
    delete_ca_certs "$BACKUP_FILES_DIR/"*.crt
    delete_ca_certs "$SRC_FILES_DIR/"*CA*.crt
    delete_ca_certs "$OBSOLETE_FILES_DIR/"*.crt
    delete_cert_aliases
    import_ca_certs "$SRC_FILES_DIR/"*CA*.crt
    create_host_p12
    import_cert_aliases
    chown $SUPERUSER_USER_NAME:$SUPERUSER_GROUP_NAME "$CA_BUNDLE_PATH"
    chmod 644 "$CA_BUNDLE_PATH"
    chown $SUPERUSER_USER_NAME:$SUPERUSER_GROUP_NAME "$JAVA_KEYSTORE_PATH"
    chmod 644 "$JAVA_KEYSTORE_PATH"
    chown $TC_USER_NAME:$TC_GROUP_NAME "$TC_KEYSTORE_PATH"
    chmod 750 "$TC_KEYSTORE_PATH"

    echo -e "\nSCRIPT COMPLETED SUCCESSFULLY IF ALL STEPS ABOVE ARE MARKED...OK\n"
}

if [[ -d "$1" ]]; then
    export SRC_FILES_DIR="${1%/}"
fi
if [[ -n "$2" ]]; then
    export BACKUP_FILES_DIR="${2%/}"
fi
if [[ -d "$3" ]]; then
    export OBSOLETE_FILES_DIR="${3%/}"
fi

main
